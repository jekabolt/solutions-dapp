// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

// Links to images
export type ImageList = {
  // link to fullsized image
  fullSize: string | undefined;
  // link to compressed image
  compressed: string | undefined;
};

// B64 raw image or link
export type ImageToUpload = {
  // base64 encoded image if it starts from "http://" or  "https://" will be stored as link if not will be uploaded to s3
  raw: string | undefined;
};

// Mint request info
export type NFTMintRequest = {
  // internal id in db
  id: string | undefined;
  // eth address of minter account
  ethAddress: string | undefined;
  // hash of mint transaction
  TxHash: string | undefined;
  // sequence number of minted nft
  mintSequenceNumber: number | undefined;
  // user defined description of drawing
  description: string | undefined;
};

// Images and request info for submitting nft
export type NFTMintRequestToUpload = {
  // array of images from which nft should be referenced
  sampleImages: ImageToUpload[] | undefined;
  // mint request info
  nftMintRequest: NFTMintRequest | undefined;
};

// NFT request as is with status
// list of statuses
// StatusUnknown          NFTStatus = "unknown"
// StatusPending          NFTStatus = "pending"
// StatusFailed           NFTStatus = "failed"
// StatusUploadedOffchain NFTStatus = "offchain"
// StatusUploaded         NFTStatus = "uploaded"
// StatusBurned           NFTStatus = "burned"
// StatusShipped          NFTStatus = "shipped"
export type NFTMintRequestWithStatus = {
  // array of images from which nft should be referenced
  sampleImages: ImageList[] | undefined;
  // mint request info
  nftMintRequest: NFTMintRequest | undefined;
  // status
  status: string | undefined;
  // resulted nft url uploaded offchain i.e to s3 can be empty
  nftOffchainUrl: string | undefined;
  // related only if status is burned or shipped
  shipping: Shipping | undefined;
};

// Shipping info
export type Shipping = {
  shipping: ShippingTo | undefined;
  trackingNumber: string | undefined;
};

// ShippingTo shipping info
export type ShippingTo = {
  fullName: string | undefined;
  address: string | undefined;
  zipCode: string | undefined;
  city: string | undefined;
  country: string | undefined;
  email: string | undefined;
};

// NFT request as is with status pages
export type NFTMintRequestWithStatusPaged = {
  // array of images from which nft should be referenced
  MintRequests: NFTMintRequestWithStatus[] | undefined;
  // amount of pages available
  totalPages: number | undefined;
};

// List of all submitted mint requests
export type NFTMintRequestListArray = {
  // uploaded mint request with status
  nftMintRequests: NFTMintRequestWithStatus[] | undefined;
};

// Delete mint request offchain url
export type DeleteId = {
  // internal id in db
  id: string | undefined;
};

// response for deleteing status
export type DeleteStatus = {
  // error message
  message: string | undefined;
};

// Update NFT offchain url
export type UpdateNFTOffchainUrlRequest = {
  // internai id
  id: string | undefined;
  // resulted nft raw image b64 encoded
  nftOffchainUrl: ImageToUpload | undefined;
};

// Upload offchain metadata _metadata.json
export type MetadataOffchainUrl = {
  // all metadata json url uploaded to s3 will be used to upload to ipfs
  Url: string | undefined;
};

// Burn
export type BurnRequest = {
  txid: string | undefined;
  address: string | undefined;
  mintSequenceNumber: number | undefined;
  shipping: ShippingTo | undefined;
};

// SetTrackingNumberRequest update tracking number for shipping
export type SetTrackingNumberRequest = {
  // internai id
  id: string | undefined;
  // resulted nft raw image b64 encoded
  trackingNumber: string | undefined;
};

export interface Nft {
  // Method used in ui for submitting drawing nft reference use id 0 for new nft and current nft id for update
  UpsertNFTMintRequest(request: NFTMintRequestToUpload): Promise<NFTMintRequestWithStatus>;
  // List all mint requests
  ListNFTMintRequests(request: wellKnownEmpty): Promise<NFTMintRequestListArray>;
  // Delete mint requests by internal id
  DeleteNFTMintRequestById(request: DeleteId): Promise<DeleteStatus>;
  // Upload resulted nft offchain from b64
  UpdateNFTOffchainUrl(request: UpdateNFTOffchainUrlRequest): Promise<NFTMintRequestWithStatus>;
  // Remove nft offchain url from mint request
  DeleteNFTOffchainUrl(request: DeleteId): Promise<NFTMintRequestWithStatus>;
  // Get all metadata with status StatusUploadedOffchain & StatusUploaded and create _metadata.json
  UploadOffchainMetadata(request: wellKnownEmpty): Promise<MetadataOffchainUrl>;
  Burn(request: BurnRequest): Promise<wellKnownEmpty>;
  SetTrackNumber(request: SetTrackingNumberRequest): Promise<wellKnownEmpty>;
  // TODO: add rpc for getting metadata offchain url
  UploadIPFSMetadata(request: wellKnownEmpty): Promise<wellKnownEmpty>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType) => Promise<unknown>;

export function createNftClient(
  handler: RequestHandler
): Nft {
  return {
    UpsertNFTMintRequest(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/requests`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<NFTMintRequestWithStatus>;
    },
    ListNFTMintRequests(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/requests`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<NFTMintRequestListArray>;
    },
    DeleteNFTMintRequestById(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/nft/requests/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<DeleteStatus>;
    },
    UpdateNFTOffchainUrl(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<NFTMintRequestWithStatus>;
    },
    DeleteNFTOffchainUrl(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/nft/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<NFTMintRequestWithStatus>;
    },
    UploadOffchainMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/offchain`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<MetadataOffchainUrl>;
    },
    Burn(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/burn`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    SetTrackNumber(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/burn/track`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    UploadIPFSMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/ipfs`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<wellKnownEmpty>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;


// @@protoc_insertion_point(typescript-http-eof)

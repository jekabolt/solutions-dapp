// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: nft/nft.proto

package art_admin

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// image
type ImageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullSize   string `protobuf:"bytes,1,opt,name=fullSize,proto3" json:"fullSize,omitempty"`
	Compressed string `protobuf:"bytes,2,opt,name=compressed,proto3" json:"compressed,omitempty"`
}

func (x *ImageList) Reset() {
	*x = ImageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageList) ProtoMessage() {}

func (x *ImageList) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageList.ProtoReflect.Descriptor instead.
func (*ImageList) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{0}
}

func (x *ImageList) GetFullSize() string {
	if x != nil {
		return x.FullSize
	}
	return ""
}

func (x *ImageList) GetCompressed() string {
	if x != nil {
		return x.Compressed
	}
	return ""
}

type ImageToUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw string `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *ImageToUpload) Reset() {
	*x = ImageToUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageToUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageToUpload) ProtoMessage() {}

func (x *ImageToUpload) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageToUpload.ProtoReflect.Descriptor instead.
func (*ImageToUpload) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{1}
}

func (x *ImageToUpload) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

type NFTMintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EthAddress         string `protobuf:"bytes,2,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	TxHash             string `protobuf:"bytes,3,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	MintSequenceNumber int64  `protobuf:"varint,4,opt,name=mintSequenceNumber,proto3" json:"mintSequenceNumber,omitempty"`
	Description        string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NFTMintRequest) Reset() {
	*x = NFTMintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequest) ProtoMessage() {}

func (x *NFTMintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequest.ProtoReflect.Descriptor instead.
func (*NFTMintRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{2}
}

func (x *NFTMintRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFTMintRequest) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *NFTMintRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *NFTMintRequest) GetMintSequenceNumber() int64 {
	if x != nil {
		return x.MintSequenceNumber
	}
	return 0
}

func (x *NFTMintRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type NFTMintRequestToUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleImages   []*ImageToUpload `protobuf:"bytes,1,rep,name=sampleImages,proto3" json:"sampleImages,omitempty"`
	NftMintRequest *NFTMintRequest  `protobuf:"bytes,2,opt,name=nftMintRequest,proto3" json:"nftMintRequest,omitempty"`
}

func (x *NFTMintRequestToUpload) Reset() {
	*x = NFTMintRequestToUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequestToUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequestToUpload) ProtoMessage() {}

func (x *NFTMintRequestToUpload) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequestToUpload.ProtoReflect.Descriptor instead.
func (*NFTMintRequestToUpload) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{3}
}

func (x *NFTMintRequestToUpload) GetSampleImages() []*ImageToUpload {
	if x != nil {
		return x.SampleImages
	}
	return nil
}

func (x *NFTMintRequestToUpload) GetNftMintRequest() *NFTMintRequest {
	if x != nil {
		return x.NftMintRequest
	}
	return nil
}

type NFTMintRequestWithStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleImages   []*ImageList    `protobuf:"bytes,1,rep,name=sampleImages,proto3" json:"sampleImages,omitempty"`
	NftMintRequest *NFTMintRequest `protobuf:"bytes,2,opt,name=nftMintRequest,proto3" json:"nftMintRequest,omitempty"`
	Status         string          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	NftOffchainUrl string          `protobuf:"bytes,4,opt,name=nftOffchainUrl,proto3" json:"nftOffchainUrl,omitempty"`
}

func (x *NFTMintRequestWithStatus) Reset() {
	*x = NFTMintRequestWithStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequestWithStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequestWithStatus) ProtoMessage() {}

func (x *NFTMintRequestWithStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequestWithStatus.ProtoReflect.Descriptor instead.
func (*NFTMintRequestWithStatus) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{4}
}

func (x *NFTMintRequestWithStatus) GetSampleImages() []*ImageList {
	if x != nil {
		return x.SampleImages
	}
	return nil
}

func (x *NFTMintRequestWithStatus) GetNftMintRequest() *NFTMintRequest {
	if x != nil {
		return x.NftMintRequest
	}
	return nil
}

func (x *NFTMintRequestWithStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NFTMintRequestWithStatus) GetNftOffchainUrl() string {
	if x != nil {
		return x.NftOffchainUrl
	}
	return ""
}

type NFTMintRequestListArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftMintRequests []*NFTMintRequestWithStatus `protobuf:"bytes,1,rep,name=nftMintRequests,proto3" json:"nftMintRequests,omitempty"`
}

func (x *NFTMintRequestListArray) Reset() {
	*x = NFTMintRequestListArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequestListArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequestListArray) ProtoMessage() {}

func (x *NFTMintRequestListArray) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequestListArray.ProtoReflect.Descriptor instead.
func (*NFTMintRequestListArray) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{5}
}

func (x *NFTMintRequestListArray) GetNftMintRequests() []*NFTMintRequestWithStatus {
	if x != nil {
		return x.NftMintRequests
	}
	return nil
}

// delete
type DeleteId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteId) Reset() {
	*x = DeleteId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteId) ProtoMessage() {}

func (x *DeleteId) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteId.ProtoReflect.Descriptor instead.
func (*DeleteId) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteStatus) Reset() {
	*x = DeleteStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStatus) ProtoMessage() {}

func (x *DeleteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStatus.ProtoReflect.Descriptor instead.
func (*DeleteStatus) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Update NFT offchain url
type UpdateNFTOffchainUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NftOffchainUrl string `protobuf:"bytes,2,opt,name=nftOffchainUrl,proto3" json:"nftOffchainUrl,omitempty"`
}

func (x *UpdateNFTOffchainUrlRequest) Reset() {
	*x = UpdateNFTOffchainUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNFTOffchainUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNFTOffchainUrlRequest) ProtoMessage() {}

func (x *UpdateNFTOffchainUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNFTOffchainUrlRequest.ProtoReflect.Descriptor instead.
func (*UpdateNFTOffchainUrlRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNFTOffchainUrlRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateNFTOffchainUrlRequest) GetNftOffchainUrl() string {
	if x != nil {
		return x.NftOffchainUrl
	}
	return ""
}

// Upload offchain metadata _metadata.json
type MetadataOffchainUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *MetadataOffchainUrl) Reset() {
	*x = MetadataOffchainUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataOffchainUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataOffchainUrl) ProtoMessage() {}

func (x *MetadataOffchainUrl) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataOffchainUrl.ProtoReflect.Descriptor instead.
func (*MetadataOffchainUrl) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{9}
}

func (x *MetadataOffchainUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Burn
type BurnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid               string      `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`       // burn transaction
	Address            string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // burner address
	MintSequenceNumber int64       `protobuf:"varint,3,opt,name=mintSequenceNumber,proto3" json:"mintSequenceNumber,omitempty"`
	Shipping           *ShippingTo `protobuf:"bytes,4,opt,name=shipping,proto3" json:"shipping,omitempty"`
}

func (x *BurnRequest) Reset() {
	*x = BurnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnRequest) ProtoMessage() {}

func (x *BurnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnRequest.ProtoReflect.Descriptor instead.
func (*BurnRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{10}
}

func (x *BurnRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *BurnRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BurnRequest) GetMintSequenceNumber() int64 {
	if x != nil {
		return x.MintSequenceNumber
	}
	return 0
}

func (x *BurnRequest) GetShipping() *ShippingTo {
	if x != nil {
		return x.Shipping
	}
	return nil
}

type ShippingTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName string `protobuf:"bytes,1,opt,name=fullName,proto3" json:"fullName,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ZipCode  string `protobuf:"bytes,3,opt,name=zipCode,proto3" json:"zipCode,omitempty"`
	City     string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Country  string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Email    string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ShippingTo) Reset() {
	*x = ShippingTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingTo) ProtoMessage() {}

func (x *ShippingTo) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingTo.ProtoReflect.Descriptor instead.
func (*ShippingTo) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{11}
}

func (x *ShippingTo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ShippingTo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ShippingTo) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *ShippingTo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ShippingTo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ShippingTo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ShippingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackNumber string `protobuf:"bytes,1,opt,name=trackNumber,proto3" json:"trackNumber,omitempty"`
	TimeSent    int64  `protobuf:"varint,2,opt,name=timeSent,proto3" json:"timeSent,omitempty"` // unix time
	Error       string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Success     bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ShippingStatus) Reset() {
	*x = ShippingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingStatus) ProtoMessage() {}

func (x *ShippingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingStatus.ProtoReflect.Descriptor instead.
func (*ShippingStatus) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{12}
}

func (x *ShippingStatus) GetTrackNumber() string {
	if x != nil {
		return x.TrackNumber
	}
	return ""
}

func (x *ShippingStatus) GetTimeSent() int64 {
	if x != nil {
		return x.TimeSent
	}
	return 0
}

func (x *ShippingStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ShippingStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ShippingStatusUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status *ShippingStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ShippingStatusUpdateRequest) Reset() {
	*x = ShippingStatusUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingStatusUpdateRequest) ProtoMessage() {}

func (x *ShippingStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ShippingStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{13}
}

func (x *ShippingStatusUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShippingStatusUpdateRequest) GetStatus() *ShippingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type BurnShippingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Burn   *BurnRequest    `protobuf:"bytes,2,opt,name=burn,proto3" json:"burn,omitempty"`
	Status *ShippingStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BurnShippingInfo) Reset() {
	*x = BurnShippingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnShippingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnShippingInfo) ProtoMessage() {}

func (x *BurnShippingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnShippingInfo.ProtoReflect.Descriptor instead.
func (*BurnShippingInfo) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{14}
}

func (x *BurnShippingInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BurnShippingInfo) GetBurn() *BurnRequest {
	if x != nil {
		return x.Burn
	}
	return nil
}

func (x *BurnShippingInfo) GetStatus() *ShippingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type BurnList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BurnShippingInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BurnList) Reset() {
	*x = BurnList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnList) ProtoMessage() {}

func (x *BurnList) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnList.ProtoReflect.Descriptor instead.
func (*BurnList) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{15}
}

func (x *BurnList) GetData() []*BurnShippingInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_nft_nft_proto protoreflect.FileDescriptor

var file_nft_nft_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6e, 0x66, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x47, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x21, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0xaa, 0x01, 0x0a, 0x0e,
	0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x4e, 0x46, 0x54,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6e,
	0x66, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x4e, 0x46, 0x54,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6e, 0x66, 0x74,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x66, 0x74, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x4f, 0x66, 0x66, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x62, 0x0a, 0x17, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x47, 0x0a, 0x0f, 0x6e, 0x66, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6e, 0x66, 0x74, 0x4d, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x55, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x6e, 0x66, 0x74, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x4f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x27, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x22, 0x98, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xa0, 0x01, 0x0a, 0x0a,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x7e,
	0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5a,
	0x0a, 0x1b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a, 0x10, 0x42, 0x75,
	0x72, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x04, 0x62, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x62, 0x75, 0x72, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x35, 0x0a, 0x08, 0x42, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x9d, 0x09, 0x0a, 0x03, 0x4e, 0x66, 0x74,
	0x12, 0x70, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e,
	0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66,
	0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54,
	0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x66, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x0d,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x68, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66,
	0x74, 0x2f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x4a, 0x0a,
	0x04, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x10, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66,
	0x74, 0x2f, 0x62, 0x75, 0x72, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x66, 0x74, 0x2f, 0x62, 0x75, 0x72, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x75, 0x72,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x75, 0x72, 0x6e, 0x2f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x66, 0x74, 0x2f, 0x62, 0x75, 0x72, 0x6e, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x79, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x50, 0x46, 0x53, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74,
	0x2f, 0x69, 0x70, 0x66, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x65, 0x6b, 0x61, 0x62, 0x6f, 0x6c, 0x74, 0x2f,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x64, 0x61, 0x70, 0x70, 0x2f, 0x61,
	0x72, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_nft_proto_rawDescOnce sync.Once
	file_nft_nft_proto_rawDescData = file_nft_nft_proto_rawDesc
)

func file_nft_nft_proto_rawDescGZIP() []byte {
	file_nft_nft_proto_rawDescOnce.Do(func() {
		file_nft_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_nft_proto_rawDescData)
	})
	return file_nft_nft_proto_rawDescData
}

var file_nft_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_nft_nft_proto_goTypes = []interface{}{
	(*ImageList)(nil),                   // 0: nft.ImageList
	(*ImageToUpload)(nil),               // 1: nft.ImageToUpload
	(*NFTMintRequest)(nil),              // 2: nft.NFTMintRequest
	(*NFTMintRequestToUpload)(nil),      // 3: nft.NFTMintRequestToUpload
	(*NFTMintRequestWithStatus)(nil),    // 4: nft.NFTMintRequestWithStatus
	(*NFTMintRequestListArray)(nil),     // 5: nft.NFTMintRequestListArray
	(*DeleteId)(nil),                    // 6: nft.DeleteId
	(*DeleteStatus)(nil),                // 7: nft.DeleteStatus
	(*UpdateNFTOffchainUrlRequest)(nil), // 8: nft.UpdateNFTOffchainUrlRequest
	(*MetadataOffchainUrl)(nil),         // 9: nft.MetadataOffchainUrl
	(*BurnRequest)(nil),                 // 10: nft.BurnRequest
	(*ShippingTo)(nil),                  // 11: nft.ShippingTo
	(*ShippingStatus)(nil),              // 12: nft.ShippingStatus
	(*ShippingStatusUpdateRequest)(nil), // 13: nft.ShippingStatusUpdateRequest
	(*BurnShippingInfo)(nil),            // 14: nft.BurnShippingInfo
	(*BurnList)(nil),                    // 15: nft.BurnList
	(*emptypb.Empty)(nil),               // 16: google.protobuf.Empty
}
var file_nft_nft_proto_depIdxs = []int32{
	1,  // 0: nft.NFTMintRequestToUpload.sampleImages:type_name -> nft.ImageToUpload
	2,  // 1: nft.NFTMintRequestToUpload.nftMintRequest:type_name -> nft.NFTMintRequest
	0,  // 2: nft.NFTMintRequestWithStatus.sampleImages:type_name -> nft.ImageList
	2,  // 3: nft.NFTMintRequestWithStatus.nftMintRequest:type_name -> nft.NFTMintRequest
	4,  // 4: nft.NFTMintRequestListArray.nftMintRequests:type_name -> nft.NFTMintRequestWithStatus
	11, // 5: nft.BurnRequest.shipping:type_name -> nft.ShippingTo
	12, // 6: nft.ShippingStatusUpdateRequest.status:type_name -> nft.ShippingStatus
	10, // 7: nft.BurnShippingInfo.burn:type_name -> nft.BurnRequest
	12, // 8: nft.BurnShippingInfo.status:type_name -> nft.ShippingStatus
	14, // 9: nft.BurnList.data:type_name -> nft.BurnShippingInfo
	3,  // 10: nft.Nft.UpsertNFTMintRequest:input_type -> nft.NFTMintRequestToUpload
	16, // 11: nft.Nft.ListNFTMintRequests:input_type -> google.protobuf.Empty
	6,  // 12: nft.Nft.DeleteNFTMintRequestById:input_type -> nft.DeleteId
	8,  // 13: nft.Nft.UpdateNFTOffchainUrl:input_type -> nft.UpdateNFTOffchainUrlRequest
	6,  // 14: nft.Nft.DeleteNFTOffchainUrl:input_type -> nft.DeleteId
	16, // 15: nft.Nft.UploadOffchainMetadata:input_type -> google.protobuf.Empty
	10, // 16: nft.Nft.Burn:input_type -> nft.BurnRequest
	16, // 17: nft.Nft.GetAllBurned:input_type -> google.protobuf.Empty
	16, // 18: nft.Nft.GetAllBurnedPending:input_type -> google.protobuf.Empty
	16, // 19: nft.Nft.GetAllBurnedError:input_type -> google.protobuf.Empty
	13, // 20: nft.Nft.UpdateBurnShippingStatus:input_type -> nft.ShippingStatusUpdateRequest
	16, // 21: nft.Nft.UploadIPFSMetadata:input_type -> google.protobuf.Empty
	4,  // 22: nft.Nft.UpsertNFTMintRequest:output_type -> nft.NFTMintRequestWithStatus
	5,  // 23: nft.Nft.ListNFTMintRequests:output_type -> nft.NFTMintRequestListArray
	7,  // 24: nft.Nft.DeleteNFTMintRequestById:output_type -> nft.DeleteStatus
	4,  // 25: nft.Nft.UpdateNFTOffchainUrl:output_type -> nft.NFTMintRequestWithStatus
	4,  // 26: nft.Nft.DeleteNFTOffchainUrl:output_type -> nft.NFTMintRequestWithStatus
	9,  // 27: nft.Nft.UploadOffchainMetadata:output_type -> nft.MetadataOffchainUrl
	16, // 28: nft.Nft.Burn:output_type -> google.protobuf.Empty
	15, // 29: nft.Nft.GetAllBurned:output_type -> nft.BurnList
	15, // 30: nft.Nft.GetAllBurnedPending:output_type -> nft.BurnList
	15, // 31: nft.Nft.GetAllBurnedError:output_type -> nft.BurnList
	16, // 32: nft.Nft.UpdateBurnShippingStatus:output_type -> google.protobuf.Empty
	16, // 33: nft.Nft.UploadIPFSMetadata:output_type -> google.protobuf.Empty
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_nft_nft_proto_init() }
func file_nft_nft_proto_init() {
	if File_nft_nft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageToUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequestToUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequestWithStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequestListArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNFTOffchainUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataOffchainUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingStatusUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnShippingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_nft_proto_goTypes,
		DependencyIndexes: file_nft_nft_proto_depIdxs,
		MessageInfos:      file_nft_nft_proto_msgTypes,
	}.Build()
	File_nft_nft_proto = out.File
	file_nft_nft_proto_rawDesc = nil
	file_nft_nft_proto_goTypes = nil
	file_nft_nft_proto_depIdxs = nil
}

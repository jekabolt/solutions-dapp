// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

// GetMetadataRequest request
export type GetMetadataRequest = {
  offchain: boolean | undefined;
};

// GetMetadataResponse response
export type GetMetadataResponse = {
  metaInfo: MetaInfo[] | undefined;
};

// description of metadata stored in db
export type MetaInfo = {
  // ipfsUrl of metadata
  ipfsUrl: string | undefined;
  // if metadata is uploading now
  processing: boolean | undefined;
  // timestamp of metadata creation
  ts: number | undefined;
  // internal id in db
  id: string | undefined;
};

// UploadOffchainMetadata response
export type UploadOffchainMetadataResponse = {
  // internal id in db
  metaInfo: MetaInfo | undefined;
};

// Request for UploadIPFSMetadataRequest
export type UploadIPFSMetadataRequest = {
  // internal db metadata id
  id: string | undefined;
};

// Request for UploadIPFSMetadataRequest
export type DeleteIPFSMetadataRequest = {
  // internal db metadata id
  id: string | undefined;
};

// Response for GetAllMetadata
export type GetAllMetadataResponse = {
  // array of metadata
  metaInfo: MetaInfo[] | undefined;
};

// Meta is a ipfs metadata representation + meta info
export type Meta = {
  // array of metadata
  metadata: MetadataUnit[] | undefined;
  // meta info of metadata
  metaInfo: MetaInfo | undefined;
};

// Single Unit of metadata _metadata.json
export type MetadataUnit = {
  // mint sequence number of nft
  mintSequenceNumber: number | undefined;
  // generated description for nft can't be changed
  description: string | undefined;
  // external url for nft can't be changed
  externalUrl: string | undefined;
  // image url
  image: string | undefined;
  // name of nft
  name: string | undefined;
  // array of attributes
  attributes: Attributes[] | undefined;
};

export type Attributes = {
  // type of attribute (color, size, etc)
  traitType: string | undefined;
  // value of attribute (red, 42, etc)
  value: string | undefined;
  // display type of attribute (number, string, etc)
  displayType: string | undefined;
};

export interface Metadata {
  // UploadOffchainMetadata initial upload metadata to db
  UploadOffchainMetadata(request: wellKnownEmpty): Promise<UploadOffchainMetadataResponse>;
  // UploadIPFSMetadata get current state for metadata and upload to ipfs
  UploadIPFSMetadata(request: UploadIPFSMetadataRequest): Promise<wellKnownEmpty>;
  // DeleteIPFSMetadata get metadata to upload by id and upload to ipfs
  DeleteIPFSMetadata(request: DeleteIPFSMetadataRequest): Promise<wellKnownEmpty>;
  // GetAllMetadata get all metadata submitted on chain or offchain
  // there can be only one offchain metadata
  GetMetadata(request: GetMetadataRequest): Promise<GetMetadataResponse>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createMetadataClient(
  handler: RequestHandler
): Metadata {
  return {
    UploadOffchainMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/metadata/offchain`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Metadata",
        method: "UploadOffchainMetadata",
      }) as Promise<UploadOffchainMetadataResponse>;
    },
    UploadIPFSMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/metadata/ipfs`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Metadata",
        method: "UploadIPFSMetadata",
      }) as Promise<wellKnownEmpty>;
    },
    DeleteIPFSMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/metadata/delete`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.id) {
        queryParams.push(`id=${encodeURIComponent(request.id.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "Metadata",
        method: "DeleteIPFSMetadata",
      }) as Promise<wellKnownEmpty>;
    },
    GetMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.offchain) {
        throw new Error("missing required field request.offchain");
      }
      const path = `api/metadata/get/${request.offchain}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "Metadata",
        method: "GetMetadata",
      }) as Promise<GetMetadataResponse>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;


// @@protoc_insertion_point(typescript-http-eof)

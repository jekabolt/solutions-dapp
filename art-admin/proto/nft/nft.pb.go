// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: nft/nft.proto

package nft

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status enum for mint request
type Status int32

const (
	// Any used for query all mint requests aka "*"
	Status_Any Status = 0
	// Unknown — status after user upload refs to ddapp tx is unconfirmed;
	Status_Unknown Status = 1
	// Pending — status after user upload refs to ddapp tx is  confirmed and art can be uploaded
	Status_Pending Status = 2
	// Failed — status after user upload refs to ddapp tx is failed for some reason;
	Status_Failed Status = 3
	// UploadedOffchain — status after we draw art image and its ready to be uploaded to the blockchain;
	Status_UploadedOffchain Status = 4
	// Uploaded — art image is done and uploaded to the blockchain;
	Status_Uploaded Status = 5
	// Burned — art image is  burned from blockchain and it ready to ship;
	Status_Burned Status = 6
	// Shipped — art image is  burned from blockchain and actual piece of art is shipped irl.
	Status_Shipped Status = 7
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "Any",
		1: "Unknown",
		2: "Pending",
		3: "Failed",
		4: "UploadedOffchain",
		5: "Uploaded",
		6: "Burned",
		7: "Shipped",
	}
	Status_value = map[string]int32{
		"Any":              0,
		"Unknown":          1,
		"Pending":          2,
		"Failed":           3,
		"UploadedOffchain": 4,
		"Uploaded":         5,
		"Burned":           6,
		"Shipped":          7,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_nft_nft_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_nft_nft_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{0}
}

// Links to images
type ImageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// link to fullsized image
	FullSize string `protobuf:"bytes,1,opt,name=fullSize,proto3" json:"fullSize,omitempty"`
	// link to compressed image
	Compressed string `protobuf:"bytes,2,opt,name=compressed,proto3" json:"compressed,omitempty"`
}

func (x *ImageList) Reset() {
	*x = ImageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageList) ProtoMessage() {}

func (x *ImageList) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageList.ProtoReflect.Descriptor instead.
func (*ImageList) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{0}
}

func (x *ImageList) GetFullSize() string {
	if x != nil {
		return x.FullSize
	}
	return ""
}

func (x *ImageList) GetCompressed() string {
	if x != nil {
		return x.Compressed
	}
	return ""
}

// B64 raw image or link
type ImageToUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base64 encoded image if it starts from "http://" or  "https://" will be stored as link if not will be uploaded to s3
	Raw string `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *ImageToUpload) Reset() {
	*x = ImageToUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageToUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageToUpload) ProtoMessage() {}

func (x *ImageToUpload) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageToUpload.ProtoReflect.Descriptor instead.
func (*ImageToUpload) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{1}
}

func (x *ImageToUpload) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// Mint request info
type NFTMintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id in db
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// eth address of minter account
	EthAddress string `protobuf:"bytes,2,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	// hash of mint transaction
	TxHash string `protobuf:"bytes,3,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	// sequence number of minted nft
	MintSequenceNumber int32 `protobuf:"varint,4,opt,name=mintSequenceNumber,proto3" json:"mintSequenceNumber,omitempty"`
	// user defined description of drawing
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NFTMintRequest) Reset() {
	*x = NFTMintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequest) ProtoMessage() {}

func (x *NFTMintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequest.ProtoReflect.Descriptor instead.
func (*NFTMintRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{2}
}

func (x *NFTMintRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NFTMintRequest) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *NFTMintRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *NFTMintRequest) GetMintSequenceNumber() int32 {
	if x != nil {
		return x.MintSequenceNumber
	}
	return 0
}

func (x *NFTMintRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Images and request info for submitting nft
type NFTMintRequestToUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// array of images from which nft should be referenced
	SampleImages []*ImageToUpload `protobuf:"bytes,1,rep,name=sampleImages,proto3" json:"sampleImages,omitempty"`
	// mint request info
	NftMintRequest *NFTMintRequest `protobuf:"bytes,2,opt,name=nftMintRequest,proto3" json:"nftMintRequest,omitempty"`
}

func (x *NFTMintRequestToUpload) Reset() {
	*x = NFTMintRequestToUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequestToUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequestToUpload) ProtoMessage() {}

func (x *NFTMintRequestToUpload) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequestToUpload.ProtoReflect.Descriptor instead.
func (*NFTMintRequestToUpload) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{3}
}

func (x *NFTMintRequestToUpload) GetSampleImages() []*ImageToUpload {
	if x != nil {
		return x.SampleImages
	}
	return nil
}

func (x *NFTMintRequestToUpload) GetNftMintRequest() *NFTMintRequest {
	if x != nil {
		return x.NftMintRequest
	}
	return nil
}

// NFT request as is with status
type NFTMintRequestWithStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// array of images from which nft should be referenced
	SampleImages []*ImageList `protobuf:"bytes,1,rep,name=sampleImages,proto3" json:"sampleImages,omitempty"`
	// mint request info
	NftMintRequest *NFTMintRequest `protobuf:"bytes,2,opt,name=nftMintRequest,proto3" json:"nftMintRequest,omitempty"`
	// status
	Status Status `protobuf:"varint,3,opt,name=status,proto3,enum=nft.Status" json:"status,omitempty"`
	// resulted nft url uploaded offchain i.e to s3 can be empty
	OffchainUrl string `protobuf:"bytes,4,opt,name=offchainUrl,proto3" json:"offchainUrl,omitempty"`
	// resulted nft url uploaded offchain i.e to s3 can be empty
	OnchainUrl string `protobuf:"bytes,5,opt,name=onchainUrl,proto3" json:"onchainUrl,omitempty"`
	// related only if status is burned or shipped
	Shipping *Shipping `protobuf:"bytes,6,opt,name=shipping,proto3" json:"shipping,omitempty"`
}

func (x *NFTMintRequestWithStatus) Reset() {
	*x = NFTMintRequestWithStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequestWithStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequestWithStatus) ProtoMessage() {}

func (x *NFTMintRequestWithStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequestWithStatus.ProtoReflect.Descriptor instead.
func (*NFTMintRequestWithStatus) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{4}
}

func (x *NFTMintRequestWithStatus) GetSampleImages() []*ImageList {
	if x != nil {
		return x.SampleImages
	}
	return nil
}

func (x *NFTMintRequestWithStatus) GetNftMintRequest() *NFTMintRequest {
	if x != nil {
		return x.NftMintRequest
	}
	return nil
}

func (x *NFTMintRequestWithStatus) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Any
}

func (x *NFTMintRequestWithStatus) GetOffchainUrl() string {
	if x != nil {
		return x.OffchainUrl
	}
	return ""
}

func (x *NFTMintRequestWithStatus) GetOnchainUrl() string {
	if x != nil {
		return x.OnchainUrl
	}
	return ""
}

func (x *NFTMintRequestWithStatus) GetShipping() *Shipping {
	if x != nil {
		return x.Shipping
	}
	return nil
}

// List of all submitted mint requests
type NFTMintRequestListArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uploaded mint request with status
	NftMintRequests []*NFTMintRequestWithStatus `protobuf:"bytes,1,rep,name=nftMintRequests,proto3" json:"nftMintRequests,omitempty"`
}

func (x *NFTMintRequestListArray) Reset() {
	*x = NFTMintRequestListArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTMintRequestListArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTMintRequestListArray) ProtoMessage() {}

func (x *NFTMintRequestListArray) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTMintRequestListArray.ProtoReflect.Descriptor instead.
func (*NFTMintRequestListArray) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{5}
}

func (x *NFTMintRequestListArray) GetNftMintRequests() []*NFTMintRequestWithStatus {
	if x != nil {
		return x.NftMintRequests
	}
	return nil
}

// ListPagedRequest
type ListPagedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mint request status
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=nft.Status" json:"status,omitempty"`
	// page number
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListPagedRequest) Reset() {
	*x = ListPagedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPagedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPagedRequest) ProtoMessage() {}

func (x *ListPagedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPagedRequest.ProtoReflect.Descriptor instead.
func (*ListPagedRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{6}
}

func (x *ListPagedRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_Any
}

func (x *ListPagedRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// Delete mint request offchain url
type DeleteId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal id in db
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteId) Reset() {
	*x = DeleteId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteId) ProtoMessage() {}

func (x *DeleteId) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteId.ProtoReflect.Descriptor instead.
func (*DeleteId) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// response for deleteing status
type DeleteStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteStatus) Reset() {
	*x = DeleteStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStatus) ProtoMessage() {}

func (x *DeleteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStatus.ProtoReflect.Descriptor instead.
func (*DeleteStatus) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Update NFT offchain url
type UpdateNFTOffchainUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internai id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// resulted nft raw image b64 encoded
	NftOffchainUrl *ImageToUpload `protobuf:"bytes,2,opt,name=nftOffchainUrl,proto3" json:"nftOffchainUrl,omitempty"`
}

func (x *UpdateNFTOffchainUrlRequest) Reset() {
	*x = UpdateNFTOffchainUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNFTOffchainUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNFTOffchainUrlRequest) ProtoMessage() {}

func (x *UpdateNFTOffchainUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNFTOffchainUrlRequest.ProtoReflect.Descriptor instead.
func (*UpdateNFTOffchainUrlRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNFTOffchainUrlRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateNFTOffchainUrlRequest) GetNftOffchainUrl() *ImageToUpload {
	if x != nil {
		return x.NftOffchainUrl
	}
	return nil
}

// Burn
type BurnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid               string      `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`       // burn transaction
	Id                 string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`           // internal id
	Address            string      `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // burner address
	MintSequenceNumber int32       `protobuf:"varint,4,opt,name=mintSequenceNumber,proto3" json:"mintSequenceNumber,omitempty"`
	Shipping           *ShippingTo `protobuf:"bytes,5,opt,name=shipping,proto3" json:"shipping,omitempty"`
}

func (x *BurnRequest) Reset() {
	*x = BurnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnRequest) ProtoMessage() {}

func (x *BurnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnRequest.ProtoReflect.Descriptor instead.
func (*BurnRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{10}
}

func (x *BurnRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *BurnRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BurnRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BurnRequest) GetMintSequenceNumber() int32 {
	if x != nil {
		return x.MintSequenceNumber
	}
	return 0
}

func (x *BurnRequest) GetShipping() *ShippingTo {
	if x != nil {
		return x.Shipping
	}
	return nil
}

// ShippingTo shipping info
type ShippingTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName string `protobuf:"bytes,1,opt,name=fullName,proto3" json:"fullName,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ZipCode  string `protobuf:"bytes,3,opt,name=zipCode,proto3" json:"zipCode,omitempty"`
	City     string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Country  string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Email    string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ShippingTo) Reset() {
	*x = ShippingTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingTo) ProtoMessage() {}

func (x *ShippingTo) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingTo.ProtoReflect.Descriptor instead.
func (*ShippingTo) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{11}
}

func (x *ShippingTo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ShippingTo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ShippingTo) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *ShippingTo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ShippingTo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ShippingTo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// Shipping info
type Shipping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shipping       *ShippingTo `protobuf:"bytes,1,opt,name=shipping,proto3" json:"shipping,omitempty"`
	TrackingNumber string      `protobuf:"bytes,2,opt,name=trackingNumber,proto3" json:"trackingNumber,omitempty"`
}

func (x *Shipping) Reset() {
	*x = Shipping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shipping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shipping) ProtoMessage() {}

func (x *Shipping) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shipping.ProtoReflect.Descriptor instead.
func (*Shipping) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{12}
}

func (x *Shipping) GetShipping() *ShippingTo {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *Shipping) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

// SetTrackingNumberRequest update tracking number for shipping
type SetTrackingNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internai id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// resulted nft raw image b64 encoded
	TrackingNumber string `protobuf:"bytes,2,opt,name=trackingNumber,proto3" json:"trackingNumber,omitempty"`
}

func (x *SetTrackingNumberRequest) Reset() {
	*x = SetTrackingNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrackingNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrackingNumberRequest) ProtoMessage() {}

func (x *SetTrackingNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrackingNumberRequest.ProtoReflect.Descriptor instead.
func (*SetTrackingNumberRequest) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{13}
}

func (x *SetTrackingNumberRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetTrackingNumberRequest) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

var File_nft_nft_proto protoreflect.FileDescriptor

var file_nft_nft_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6e, 0x66, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x47, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x21, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0xaa, 0x01, 0x0a, 0x0e,
	0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x4e, 0x46, 0x54,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6e,
	0x66, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x4d, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x18, 0x4e, 0x46, 0x54,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6e, 0x66, 0x74,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a,
	0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x62, 0x0a, 0x17, 0x4e, 0x46, 0x54, 0x4d,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x6e, 0x66, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6e, 0x66, 0x74,
	0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x69, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x0e, 0x6e, 0x66, 0x74, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x4f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x42,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x52, 0x08, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5f, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x74, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x10, 0x07, 0x32, 0xd1, 0x05, 0x0a, 0x03, 0x4e, 0x66, 0x74, 0x12, 0x6d, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x64, 0x12, 0x15, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x7d, 0x2f,
	0x7b, 0x70, 0x61, 0x67, 0x65, 0x7d, 0x12, 0x5c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x64, 0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46,
	0x54, 0x4f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x13, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x4f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x0d, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x4e, 0x46, 0x54, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x2a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x4a, 0x0a, 0x04, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x10, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x66, 0x74, 0x2f, 0x62, 0x75, 0x72, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22,
	0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x75, 0x72, 0x6e, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x65, 0x6b, 0x61, 0x62, 0x6f, 0x6c, 0x74, 0x2f, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2d, 0x64, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x72,
	0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6e, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_nft_nft_proto_rawDescOnce sync.Once
	file_nft_nft_proto_rawDescData = file_nft_nft_proto_rawDesc
)

func file_nft_nft_proto_rawDescGZIP() []byte {
	file_nft_nft_proto_rawDescOnce.Do(func() {
		file_nft_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_nft_proto_rawDescData)
	})
	return file_nft_nft_proto_rawDescData
}

var file_nft_nft_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nft_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_nft_nft_proto_goTypes = []interface{}{
	(Status)(0),                         // 0: nft.Status
	(*ImageList)(nil),                   // 1: nft.ImageList
	(*ImageToUpload)(nil),               // 2: nft.ImageToUpload
	(*NFTMintRequest)(nil),              // 3: nft.NFTMintRequest
	(*NFTMintRequestToUpload)(nil),      // 4: nft.NFTMintRequestToUpload
	(*NFTMintRequestWithStatus)(nil),    // 5: nft.NFTMintRequestWithStatus
	(*NFTMintRequestListArray)(nil),     // 6: nft.NFTMintRequestListArray
	(*ListPagedRequest)(nil),            // 7: nft.ListPagedRequest
	(*DeleteId)(nil),                    // 8: nft.DeleteId
	(*DeleteStatus)(nil),                // 9: nft.DeleteStatus
	(*UpdateNFTOffchainUrlRequest)(nil), // 10: nft.UpdateNFTOffchainUrlRequest
	(*BurnRequest)(nil),                 // 11: nft.BurnRequest
	(*ShippingTo)(nil),                  // 12: nft.ShippingTo
	(*Shipping)(nil),                    // 13: nft.Shipping
	(*SetTrackingNumberRequest)(nil),    // 14: nft.SetTrackingNumberRequest
	(*emptypb.Empty)(nil),               // 15: google.protobuf.Empty
}
var file_nft_nft_proto_depIdxs = []int32{
	2,  // 0: nft.NFTMintRequestToUpload.sampleImages:type_name -> nft.ImageToUpload
	3,  // 1: nft.NFTMintRequestToUpload.nftMintRequest:type_name -> nft.NFTMintRequest
	1,  // 2: nft.NFTMintRequestWithStatus.sampleImages:type_name -> nft.ImageList
	3,  // 3: nft.NFTMintRequestWithStatus.nftMintRequest:type_name -> nft.NFTMintRequest
	0,  // 4: nft.NFTMintRequestWithStatus.status:type_name -> nft.Status
	13, // 5: nft.NFTMintRequestWithStatus.shipping:type_name -> nft.Shipping
	5,  // 6: nft.NFTMintRequestListArray.nftMintRequests:type_name -> nft.NFTMintRequestWithStatus
	0,  // 7: nft.ListPagedRequest.status:type_name -> nft.Status
	2,  // 8: nft.UpdateNFTOffchainUrlRequest.nftOffchainUrl:type_name -> nft.ImageToUpload
	12, // 9: nft.BurnRequest.shipping:type_name -> nft.ShippingTo
	12, // 10: nft.Shipping.shipping:type_name -> nft.ShippingTo
	4,  // 11: nft.Nft.NewNFTMintRequest:input_type -> nft.NFTMintRequestToUpload
	7,  // 12: nft.Nft.ListNFTMintRequestsPaged:input_type -> nft.ListPagedRequest
	8,  // 13: nft.Nft.DeleteNFTMintRequestById:input_type -> nft.DeleteId
	10, // 14: nft.Nft.UpdateNFTOffchainUrl:input_type -> nft.UpdateNFTOffchainUrlRequest
	8,  // 15: nft.Nft.DeleteNFTOffchainUrl:input_type -> nft.DeleteId
	11, // 16: nft.Nft.Burn:input_type -> nft.BurnRequest
	14, // 17: nft.Nft.SetTrackingNumber:input_type -> nft.SetTrackingNumberRequest
	5,  // 18: nft.Nft.NewNFTMintRequest:output_type -> nft.NFTMintRequestWithStatus
	6,  // 19: nft.Nft.ListNFTMintRequestsPaged:output_type -> nft.NFTMintRequestListArray
	9,  // 20: nft.Nft.DeleteNFTMintRequestById:output_type -> nft.DeleteStatus
	5,  // 21: nft.Nft.UpdateNFTOffchainUrl:output_type -> nft.NFTMintRequestWithStatus
	5,  // 22: nft.Nft.DeleteNFTOffchainUrl:output_type -> nft.NFTMintRequestWithStatus
	15, // 23: nft.Nft.Burn:output_type -> google.protobuf.Empty
	15, // 24: nft.Nft.SetTrackingNumber:output_type -> google.protobuf.Empty
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_nft_nft_proto_init() }
func file_nft_nft_proto_init() {
	if File_nft_nft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageToUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequestToUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequestWithStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTMintRequestListArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPagedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNFTOffchainUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shipping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrackingNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_nft_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_nft_proto_goTypes,
		DependencyIndexes: file_nft_nft_proto_depIdxs,
		EnumInfos:         file_nft_nft_proto_enumTypes,
		MessageInfos:      file_nft_nft_proto_msgTypes,
	}.Build()
	File_nft_nft_proto = out.File
	file_nft_nft_proto_rawDesc = nil
	file_nft_nft_proto_goTypes = nil
	file_nft_nft_proto_depIdxs = nil
}

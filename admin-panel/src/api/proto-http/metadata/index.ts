// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

// UploadOffchainMetadata response
export type UploadOffchainMetadataResponse = {
  // internal id in db
  key: string | undefined;
};

// Request for UploadIPFSMetadataRequest
export type UploadIPFSMetadataRequest = {
  // internal db metadata id
  key: string | undefined;
};

// Request for UploadIPFSMetadataRequest
export type DeleteIPFSMetadataRequest = {
  // internal db metadata id
  key: string | undefined;
};

// description of metadata stored in db
export type MetaInfo = {
  ipfsUrl: string | undefined;
  processing: boolean | undefined;
  ts: number | undefined;
  key: string | undefined;
};

// Response for GetAllMetadata
export type GetAllMetadataResponse = {
  // array of metadata
  metaInfo: MetaInfo[] | undefined;
};

// Single Unit of metadata _metadata.json
export type MetadataUnit = {
  // name of nft
  name: string | undefined;
  // description of nft
  description: string | undefined;
  // image of nft
  offchainImage: string | undefined;
  // image of nft
  onchainImage: string | undefined;
  // edition of nft
  edition: number | undefined;
  // sequence number of nft
  mintSequenceNumber: number | undefined;
  // date of submit
  date: number | undefined;
};

export interface Metadata {
  // UploadOffchainMetadata Get all mint requests with status StatusUploaded, StatusUploadedOffchain, StatusBurned, StatusShipped.
  // Create metadata for each nft and save to db
  UploadOffchainMetadata(request: wellKnownEmpty): Promise<UploadOffchainMetadataResponse>;
  // UploadIPFSMetadata get metadata to upload by id and upload to ipfs
  UploadIPFSMetadata(request: UploadIPFSMetadataRequest): Promise<wellKnownEmpty>;
  // DeleteIPFSMetadata get metadata to upload by id and upload to ipfs
  DeleteIPFSMetadata(request: DeleteIPFSMetadataRequest): Promise<wellKnownEmpty>;
  // GetAllMetadata get all uploaded offchain metadata from db
  GetAllMetadata(request: wellKnownEmpty): Promise<GetAllMetadataResponse>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType) => Promise<unknown>;

export function createMetadataClient(
  handler: RequestHandler
): Metadata {
  return {
    UploadOffchainMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/metadata/offchain`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<UploadOffchainMetadataResponse>;
    },
    UploadIPFSMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/metadata/ipfs`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    DeleteIPFSMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/metadata/delete`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.key) {
        queryParams.push(`key=${encodeURIComponent(request.key.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }) as Promise<wellKnownEmpty>;
    },
    GetAllMetadata(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/metadata/get`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }) as Promise<GetAllMetadataResponse>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;


// @@protoc_insertion_point(typescript-http-eof)

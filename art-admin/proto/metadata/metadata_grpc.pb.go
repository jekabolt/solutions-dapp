// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: metadata/metadata.proto

package metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataClient interface {
	// UploadOffchainMetadata initial upload metadata to db
	UploadOffchainMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UploadOffchainMetadataResponse, error)
	// UploadIPFSMetadata get current state for metadata and upload to ipfs
	UploadIPFSMetadata(ctx context.Context, in *UploadIPFSMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteIPFSMetadata get metadata to upload by id and upload to ipfs
	DeleteIPFSMetadata(ctx context.Context, in *DeleteIPFSMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAllMetadata get all metadata submitted on chain or offchain
	// there can be only one offchain metadata
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) UploadOffchainMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UploadOffchainMetadataResponse, error) {
	out := new(UploadOffchainMetadataResponse)
	err := c.cc.Invoke(ctx, "/metadata.Metadata/UploadOffchainMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) UploadIPFSMetadata(ctx context.Context, in *UploadIPFSMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/metadata.Metadata/UploadIPFSMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) DeleteIPFSMetadata(ctx context.Context, in *DeleteIPFSMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/metadata.Metadata/DeleteIPFSMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, "/metadata.Metadata/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
// All implementations should embed UnimplementedMetadataServer
// for forward compatibility
type MetadataServer interface {
	// UploadOffchainMetadata initial upload metadata to db
	UploadOffchainMetadata(context.Context, *emptypb.Empty) (*UploadOffchainMetadataResponse, error)
	// UploadIPFSMetadata get current state for metadata and upload to ipfs
	UploadIPFSMetadata(context.Context, *UploadIPFSMetadataRequest) (*emptypb.Empty, error)
	// DeleteIPFSMetadata get metadata to upload by id and upload to ipfs
	DeleteIPFSMetadata(context.Context, *DeleteIPFSMetadataRequest) (*emptypb.Empty, error)
	// GetAllMetadata get all metadata submitted on chain or offchain
	// there can be only one offchain metadata
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
}

// UnimplementedMetadataServer should be embedded to have forward compatible implementations.
type UnimplementedMetadataServer struct {
}

func (UnimplementedMetadataServer) UploadOffchainMetadata(context.Context, *emptypb.Empty) (*UploadOffchainMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadOffchainMetadata not implemented")
}
func (UnimplementedMetadataServer) UploadIPFSMetadata(context.Context, *UploadIPFSMetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadIPFSMetadata not implemented")
}
func (UnimplementedMetadataServer) DeleteIPFSMetadata(context.Context, *DeleteIPFSMetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPFSMetadata not implemented")
}
func (UnimplementedMetadataServer) GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}

// UnsafeMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServer will
// result in compilation errors.
type UnsafeMetadataServer interface {
	mustEmbedUnimplementedMetadataServer()
}

func RegisterMetadataServer(s grpc.ServiceRegistrar, srv MetadataServer) {
	s.RegisterService(&Metadata_ServiceDesc, srv)
}

func _Metadata_UploadOffchainMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).UploadOffchainMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.Metadata/UploadOffchainMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).UploadOffchainMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_UploadIPFSMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadIPFSMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).UploadIPFSMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.Metadata/UploadIPFSMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).UploadIPFSMetadata(ctx, req.(*UploadIPFSMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_DeleteIPFSMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPFSMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).DeleteIPFSMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.Metadata/DeleteIPFSMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).DeleteIPFSMetadata(ctx, req.(*DeleteIPFSMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.Metadata/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metadata_ServiceDesc is the grpc.ServiceDesc for Metadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadOffchainMetadata",
			Handler:    _Metadata_UploadOffchainMetadata_Handler,
		},
		{
			MethodName: "UploadIPFSMetadata",
			Handler:    _Metadata_UploadIPFSMetadata_Handler,
		},
		{
			MethodName: "DeleteIPFSMetadata",
			Handler:    _Metadata_DeleteIPFSMetadata_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _Metadata_GetMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata/metadata.proto",
}

// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

// Request for CreateNewCollection
export type CreateNewCollectionRequest = {
  // collcection name
  name: string | undefined;
  // collection capacity
  capacity: number | undefined;
};

// Response for CreateNewCollection
export type CreateNewCollectionResponse = {
  // internal db collections id
  key: string | undefined;
};

// Request for DeleteCollection
export type DeleteCollectionRequest = {
  // internal db collections id
  key: string | undefined;
};

// Response for DeleteCollection
export type DeleteCollectionResponse = {
  // internal db collections id
  key: string | undefined;
};

// Request for UpdateCollectionCapacity
export type UpdateCollectionCapacityRequest = {
  // internal db collections id
  key: string | undefined;
  // new capacity
  capacity: number | undefined;
};

// Response for UpdateCollectionCapacity
export type UpdateCollectionCapacityResponse = {
  // internal db collections id
  key: string | undefined;
};

// Request for UpdateCollectionName
export type UpdateCollectionNameRequest = {
  // internal db collections id
  key: string | undefined;
  // new collection name
  name: string | undefined;
};

// Response for UpdateCollectionName
export type UpdateCollectionNameResponse = {
  // internal db collections id
  key: string | undefined;
};

export type GetAllCollectionsResponse = {
  collections: Collection[] | undefined;
};

export type Collection = {
  // internal db collections id
  key: string | undefined;
  // collection name
  name: string | undefined;
  // collection capacity
  capacity: number | undefined;
  // collection remained capacity
  used: number | undefined;
};

// Request for GetCollectionByKey
export type GetCollectionByKeyRequest = {
  // internal db collections id
  key: string | undefined;
};

export interface Collections {
  CreateNewCollection(request: CreateNewCollectionRequest): Promise<CreateNewCollectionResponse>;
  DeleteCollection(request: DeleteCollectionRequest): Promise<DeleteCollectionResponse>;
  UpdateCollectionCapacity(request: UpdateCollectionCapacityRequest): Promise<UpdateCollectionCapacityResponse>;
  UpdateCollectionName(request: UpdateCollectionNameRequest): Promise<UpdateCollectionNameResponse>;
  GetAllCollections(request: wellKnownEmpty): Promise<GetAllCollectionsResponse>;
  GetCollectionByKey(request: GetCollectionByKeyRequest): Promise<Collection>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createCollectionsClient(
  handler: RequestHandler
): Collections {
  return {
    CreateNewCollection(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/collection/new`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Collections",
        method: "CreateNewCollection",
      }) as Promise<CreateNewCollectionResponse>;
    },
    DeleteCollection(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/collection/delete`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.key) {
        queryParams.push(`key=${encodeURIComponent(request.key.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "Collections",
        method: "DeleteCollection",
      }) as Promise<DeleteCollectionResponse>;
    },
    UpdateCollectionCapacity(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/collection/update/capacity`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Collections",
        method: "UpdateCollectionCapacity",
      }) as Promise<UpdateCollectionCapacityResponse>;
    },
    UpdateCollectionName(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/collection/update/name`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Collections",
        method: "UpdateCollectionName",
      }) as Promise<UpdateCollectionNameResponse>;
    },
    GetAllCollections(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/collection/all`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "Collections",
        method: "GetAllCollections",
      }) as Promise<GetAllCollectionsResponse>;
    },
    GetCollectionByKey(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.key) {
        throw new Error("missing required field request.key");
      }
      const path = `api/collection/${request.key}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "Collections",
        method: "GetCollectionByKey",
      }) as Promise<Collection>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;


// @@protoc_insertion_point(typescript-http-eof)

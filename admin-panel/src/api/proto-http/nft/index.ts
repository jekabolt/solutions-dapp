// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

// Status enum for mint request
export type Status =
  // Any used for query all mint requests aka "*"
  | "Any"
  // Unknown — status after user upload refs to ddapp tx is unconfirmed
  | "Unknown"
  // Pending — status after user upload refs to ddapp tx is  confirmed and art can be uploaded
  | "Pending"
  // Failed — status after user upload refs to ddapp tx is failed for some reason
  | "Failed"
  // UploadedOffchain — status after we draw art image and its ready to be uploaded to the blockchain
  | "UploadedOffchain"
  // Uploaded — art image is done and uploaded to the blockchain;
  | "Uploaded"
  // Burned — art image is  burned from blockchain and it ready to ship
  | "Burned"
  // Shipped — art image is  burned from blockchain and actual piece of art is shipped irl.
  | "Shipped";
// Request for ImageBySequenceNumber
export type ImageBySequenceNumberRequest = {
  sequenceNumber: number | undefined;
};

// Links to images
export type ImageList = {
  // link to fullsized image
  fullSize: string | undefined;
  // link to compressed image
  compressed: string | undefined;
};

// B64 raw image or link
export type ImageToUpload = {
  // base64 encoded image if it starts from "http://" or  "https://" will be stored as link if not will be uploaded to s3
  raw: string | undefined;
};

// Mint request info
export type NFTMintRequest = {
  // internal id in db
  id: string | undefined;
  // eth address of minter account
  ethAddress: string | undefined;
  // sequence number of minted nft
  mintSequenceNumber: number | undefined;
  // user defined description of drawing
  description: string | undefined;
};

// Images and request info for submitting nft
export type NFTMintRequestToUpload = {
  // array of images from which nft should be referenced
  sampleImages: ImageToUpload[] | undefined;
  // user defined description of drawing
  description: string | undefined;
  // eth address of minter account
  ethAddress: string | undefined;
};

// NFT request as is with status
export type NFTMintRequestWithStatus = {
  // array of images from which nft should be referenced
  sampleImages: ImageList[] | undefined;
  // mint request info
  nftMintRequest: NFTMintRequest | undefined;
  // status
  status: Status | undefined;
  // resulted nft url uploaded offchain i.e to s3 can be empty
  offchainUrl: string | undefined;
  // resulted nft url uploaded to ipfs can be empty
  onchainUrl: string | undefined;
  // related only if status is burned or shipped
  shipping: Shipping | undefined;
  // collection id
  collection: string | undefined;
  // duration eg 1m, 1h, 2m30s
  duration: string | undefined;
  // author of picture
  author: string | undefined;
};

// Shipping info
export type Shipping = {
  shipping: ShippingTo | undefined;
  trackingNumber: string | undefined;
};

// ShippingTo shipping info
export type ShippingTo = {
  fullName: string | undefined;
  address: string | undefined;
  zipCode: string | undefined;
  city: string | undefined;
  country: string | undefined;
  email: string | undefined;
};

// List of all submitted mint requests
export type NFTMintRequestListArray = {
  // uploaded mint request with status
  nftMintRequests: NFTMintRequestWithStatus[] | undefined;
};

// ListPagedRequest
export type ListPagedRequest = {
  // Mint request status
  status: Status | undefined;
  // page number
  page: number | undefined;
};

// Delete mint request offchain url
export type DeleteId = {
  // internal id in db
  id: string | undefined;
};

// response for deleteing status
export type DeleteStatus = {
  // error message
  message: string | undefined;
};

// Update NFT offchain url
export type UpdateNFTOffchainUrlRequest = {
  // internai id
  id: string | undefined;
  // resulted nft raw image b64 encoded
  nftOffchainUrl: ImageToUpload | undefined;
  // collection id
  collectionId: string | undefined;
};

// Burn
export type BurnRequest = {
  txid: string | undefined;
  id: string | undefined;
  address: string | undefined;
  mintSequenceNumber: number | undefined;
  shipping: ShippingTo | undefined;
};

// SetTrackingNumberRequest update tracking number for shipping
export type SetTrackingNumberRequest = {
  // internai id
  id: string | undefined;
  // resulted nft raw image b64 encoded
  trackingNumber: string | undefined;
};

export interface Nft {
  // Method used in ui for submitting drawing nft reference with initial status Unknown
  NewNFTMintRequest(request: NFTMintRequestToUpload): Promise<NFTMintRequestWithStatus>;
  // List paged mint requests by status. Default page size is 30.
  ListNFTMintRequestsPaged(request: ListPagedRequest): Promise<NFTMintRequestListArray>;
  // Delete mint requests by internal id
  DeleteNFTMintRequestById(request: DeleteId): Promise<DeleteStatus>;
  // Upload resulted nft offchain from b64
  // possble statuses: Pending, UploadedOffchain, Uploaded
  // set status to UploadedOffchain
  UpdateNFTOffchainUrl(request: UpdateNFTOffchainUrlRequest): Promise<NFTMintRequestWithStatus>;
  // Remove nft onchain url from mint request and change status to Pending
  DeleteNFTOnchainUrl(request: DeleteId): Promise<NFTMintRequestWithStatus>;
  // Burn remove nft from contract and set shipping info and set status Burned
  // possble statuses: Uploaded
  Burn(request: BurnRequest): Promise<wellKnownEmpty>;
  // SetTrackingNumber set tracking number for burned nft and set status Shipped
  // possble statuses: Burned
  SetTrackingNumber(request: SetTrackingNumberRequest): Promise<wellKnownEmpty>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createNftClient(
  handler: RequestHandler
): Nft {
  return {
    NewNFTMintRequest(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/requests`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Nft",
        method: "NewNFTMintRequest",
      }) as Promise<NFTMintRequestWithStatus>;
    },
    ListNFTMintRequestsPaged(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.status) {
        throw new Error("missing required field request.status");
      }
      if (!request.page) {
        throw new Error("missing required field request.page");
      }
      const path = `api/nft/requests/${request.status}/${request.page}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "Nft",
        method: "ListNFTMintRequestsPaged",
      }) as Promise<NFTMintRequestListArray>;
    },
    DeleteNFTMintRequestById(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/nft/requests/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "Nft",
        method: "DeleteNFTMintRequestById",
      }) as Promise<DeleteStatus>;
    },
    UpdateNFTOffchainUrl(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Nft",
        method: "UpdateNFTOffchainUrl",
      }) as Promise<NFTMintRequestWithStatus>;
    },
    DeleteNFTOnchainUrl(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/nft/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "Nft",
        method: "DeleteNFTOnchainUrl",
      }) as Promise<NFTMintRequestWithStatus>;
    },
    Burn(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/burn`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Nft",
        method: "Burn",
      }) as Promise<wellKnownEmpty>;
    },
    SetTrackingNumber(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/nft/burn/track`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "Nft",
        method: "SetTrackingNumber",
      }) as Promise<wellKnownEmpty>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;


// @@protoc_insertion_point(typescript-http-eof)

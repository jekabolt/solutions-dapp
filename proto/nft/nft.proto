syntax = "proto3";

package nft;
option go_package = "github.com/jekabolt/solutions-dapp/art-admin";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
// import "google/protobuf/timestamp.proto";


service Nft {
  //  Method used in ui for submitting drawing nft reference with initial status Unknown
  rpc NewNFTMintRequest (NFTMintRequestToUpload) returns (NFTMintRequestWithStatus){
    option (google.api.http) = {
      post : "/api/nft/requests"
      body : "*"
    };
  }

  //  List paged mint requests by status. Default page size is 30.
  rpc ListNFTMintRequestsPaged (ListPagedRequest) returns (NFTMintRequestListArray){
    option (google.api.http) = {
      get : "/api/nft/requests/{status}/{page}"
    };
  }

  //  Delete mint requests by internal id 
  rpc DeleteNFTMintRequestById (DeleteId) returns (DeleteStatus) {
    option (google.api.http) = {
			delete: "/api/nft/requests/{id}"
		};
  }

  // Upload resulted nft offchain from b64
  // possble statuses: Pending, UploadedOffchain, Uploaded
  rpc UpdateNFTOffchainUrl (UpdateNFTOffchainUrlRequest) returns (NFTMintRequestWithStatus){
    option (google.api.http) = {
      post : "/api/nft"
      body : "*"
    };
  }

  // Remove nft offchain url from mint request and change status to Pending
  rpc DeleteNFTOffchainUrl (DeleteId) returns (NFTMintRequestWithStatus) {
    option (google.api.http) = {
			delete: "/api/nft/{id}"
		};
  }

  // Burn remove nft from contract and set shipping info and set status Burned
  // possble statuses: Uploaded
  rpc Burn (BurnRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/nft/burn"
      body : "*"
    };
  }
  // SetTrackingNumber set tracking number for burned nft and set status Shipped 
  // possble statuses: Burned
  rpc SetTrackingNumber (SetTrackingNumberRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/nft/burn/track"
      body : "*"
    };
  }

  // ----- IPFS

  // UploadOffchainMetadata Get all mint requests with status StatusUploaded, StatusUploadedOffchain, StatusBurned, StatusShipped. 
  // Create _metadata.json and upload to S3
  rpc UploadOffchainMetadata (google.protobuf.Empty) returns (MetadataOffchainUrl) {
    option (google.api.http) = {
      post : "/api/nft/offchain"
      body : "*"
    };
  }

  // GetAllMetadata Get all uploaded _metadata.json records from S3 with timestamps
  rpc GetAllMetadata (google.protobuf.Empty) returns (AllMetadataResponse) {
    option (google.api.http) = {
      get : "/api/nft/metadata"
    };
  }

 
  // UploadIPFSMetadata - upload metadata from given id to IPFS and add uri to db
  rpc UploadIPFSMetadata (UploadIPFSMetadataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/nft/ipfs"
      body : "*"
    };
  }
  

}

// Links to images 
message ImageList {
  // link to fullsized image 
  string fullSize = 1;
  // link to compressed image 
  string compressed = 2;
}

// B64 raw image or link
message ImageToUpload {
  // base64 encoded image if it starts from "http://" or  "https://" will be stored as link if not will be uploaded to s3
  string raw = 1;
}


// Mint request info 
message NFTMintRequest {
  // internal id in db 
  string id = 1;
  // eth address of minter account 
  string ethAddress = 2;
  // hash of mint transaction 
  string TxHash = 3;
  // sequence number of minted nft 
  int32  mintSequenceNumber = 4;
  // user defined description of drawing 
  string description = 6;
}

// Images and request info for submitting nft
message NFTMintRequestToUpload {
  // array of images from which nft should be referenced
  repeated ImageToUpload sampleImages = 1;
  // mint request info 
  NFTMintRequest nftMintRequest = 2;
}

// Status enum for mint request
enum Status {
  // Anu used for query all mint requests aka "*"
  Any = 0;
  // Unknown — status after user upload refs to ddapp tx is unconfirmed; 
  Unknown = 1;
  // Pending — status after user upload refs to ddapp tx is  confirmed and art can be uploaded 
  Pending = 2;
  // Failed — status after user upload refs to ddapp tx is failed for some reason;  
  Failed = 3;
  // UploadedOffchain — status after we draw art image and its ready to be uploaded to the blockchain;  
  UploadedOffchain = 4;
  // Uploaded — art image is done and uploaded to the blockchain; 
  Uploaded = 5;
  // Burned — art image is  burned from blockchain and it ready to ship; 
  Burned = 6;
  // Shipped — art image is  burned from blockchain and actual piece of art is shipped irl.
  Shipped = 7;
}


// NFT request as is with status 
message NFTMintRequestWithStatus {
  // array of images from which nft should be referenced
  repeated ImageList sampleImages = 1;
  // mint request info 
  NFTMintRequest nftMintRequest = 2;
  // status
  Status status = 3;
  // resulted nft url uploaded offchain i.e to s3 can be empty 
  string nftOffchainUrl = 4;
  // related only if status is burned or shipped
  Shipping shipping = 5;
}


// List of all submitted mint requests 
message NFTMintRequestListArray {
  // uploaded mint request with status
  repeated NFTMintRequestWithStatus nftMintRequests = 1;
}


// ListPagedRequest
message ListPagedRequest {
  // Mint request status
  Status status = 1;
  // page number
  int32 page = 2;
}

// Delete mint request offchain url 
message DeleteId {
  // internal id in db 
  string id = 1;
}

// response for deleteing status 
message DeleteStatus {
  // error message 
  string message = 1;
}

// Update NFT offchain url 
message UpdateNFTOffchainUrlRequest {
  // internai id 
  string id = 1;
  // resulted nft raw image b64 encoded
  ImageToUpload nftOffchainUrl = 2;
}


// Upload offchain metadata _metadata.json
message MetadataOffchainUrl {
  // all metadata json url uploaded to s3 will be used to upload to ipfs 
  string url = 1;
  // URL ipfs
  string ipfsUrl = 2;
  // timestamp of creation
  int32 ts = 3;
  // is uploaded
  bool processing = 4; 
}

// Response for GetAllMetadata
message AllMetadataResponse {
  repeated MetadataOffchainUrl offchainUrls = 1;
}

// Request for ploadIPFSMetadata
message UploadIPFSMetadataRequest {
  // internal db metadata id 
  string id = 1;
}


// Burn
message BurnRequest {
  string txid = 1; // burn transaction
  string id = 2; // internal id
  string address = 3; // burner address 
  int32  mintSequenceNumber = 4;
  ShippingTo shipping = 5;
}

// ShippingTo shipping info
message ShippingTo {
  string fullName = 1; 
  string address = 2; 
  string zipCode = 3; 
  string city = 4; 
  string country = 5; 
  string email = 6; 
}

// Shipping info
message Shipping {
  ShippingTo shipping = 1;
  string trackingNumber = 2; 
}

// SetTrackingNumberRequest update tracking number for shipping
message SetTrackingNumberRequest {
  // internai id 
  string id = 1;
  // resulted nft raw image b64 encoded
  string trackingNumber = 2;
}

syntax = "proto3";

package nft;
option go_package = "github.com/jekabolt/solutions-dapp/art-admin";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
// import "google/protobuf/timestamp.proto";


service Nft {
  //  Method used in ui for submitting drawing nft reference use id 0 for new nft and current nft id for update
  rpc UpsertNFTMintRequest (NFTMintRequestToUpload) returns (NFTMintRequestWithStatus){
    option (google.api.http) = {
      post : "/api/nft/requests"
      body : "*"
    };
  }

  //  List all mint requests  
  rpc ListNFTMintRequests (google.protobuf.Empty) returns (NFTMintRequestListArray){
    option (google.api.http) = {
      get : "/api/nft/requests"
    };
  }

  //  Delete mint requests by internal id 
  rpc DeleteNFTMintRequestById (DeleteId) returns (DeleteStatus) {
    option (google.api.http) = {
			delete: "/api/nft/requests/{id}"
		};
  }

  // Upload resulted nft offchain from b64
  rpc UpdateNFTOffchainUrl (UpdateNFTOffchainUrlRequest) returns (NFTMintRequestWithStatus){
    option (google.api.http) = {
      post : "/api/nft"
      body : "*"
    };
  }

  // Remove nft offchain url from mint request 
  rpc DeleteNFTOffchainUrl (DeleteId) returns (NFTMintRequestWithStatus) {
    option (google.api.http) = {
			delete: "/api/nft/{id}"
		};
  }

  // Get all metadata with status StatusUploadedOffchain & StatusUploaded and create _metadata.json
  rpc UploadOffchainMetadata (google.protobuf.Empty) returns (MetadataOffchainUrl) {
    option (google.api.http) = {
      post : "/api/nft/offchain"
      body : "*"
    };
  }

  rpc Burn (BurnRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/nft/burn"
      body : "*"
    };
  }

  rpc SetTrackNumber (SetTrackingNumberRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/nft/burn/track"
      body : "*"
    };
  }

 

  // TODO: add rpc for getting metadata offchain url
  rpc UploadIPFSMetadata (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/nft/ipfs"
      body : "*"
    };
  }
  

}

// Links to images 
message ImageList {
  // link to fullsized image 
  string fullSize = 1;
  // link to compressed image 
  string compressed = 2;
}

// B64 raw image or link
message ImageToUpload {
  // base64 encoded image if it starts from "http://" or  "https://" will be stored as link if not will be uploaded to s3
  string raw = 1;
}


// Mint request info 
message NFTMintRequest {
  // internal id in db 
  string id = 1;
  // eth address of minter account 
  string ethAddress = 2;
  // hash of mint transaction 
  string TxHash = 3;
  // sequence number of minted nft 
  int32  mintSequenceNumber = 4;
  // user defined description of drawing 
  string description = 6;
}

// Images and request info for submitting nft
message NFTMintRequestToUpload {
  // array of images from which nft should be referenced
  repeated ImageToUpload sampleImages = 1;
  // mint request info 
  NFTMintRequest nftMintRequest = 2;
}

// NFT request as is with status 
// list of statuses 
// StatusUnknown          NFTStatus = "unknown"
// StatusPending          NFTStatus = "pending"
// StatusFailed           NFTStatus = "failed"
// StatusUploadedOffchain NFTStatus = "offchain"
// StatusUploaded         NFTStatus = "uploaded"
// StatusBurned           NFTStatus = "burned"
// StatusShipped          NFTStatus = "shipped"
message NFTMintRequestWithStatus {
  // array of images from which nft should be referenced
  repeated ImageList sampleImages = 1;
  // mint request info 
  NFTMintRequest nftMintRequest = 2;
  // status
  string status = 3;
  // resulted nft url uploaded offchain i.e to s3 can be empty 
  string nftOffchainUrl = 4;
  // related only if status is burned or shipped
  Shipping shipping = 5;
}

// NFT request as is with status pages
message NFTMintRequestWithStatusPaged {
  // array of images from which nft should be referenced
  repeated NFTMintRequestWithStatus MintRequests = 1;
  // amount of pages available
  int32  totalPages = 3;
}


// List of all submitted mint requests 
message NFTMintRequestListArray {
  // uploaded mint request with status
  repeated NFTMintRequestWithStatus nftMintRequests = 1;
}

// Delete mint request offchain url 
message DeleteId {
  // internal id in db 
  string id = 1;
}

// response for deleteing status 
message DeleteStatus {
  // error message 
  string message = 1;
}

// Update NFT offchain url 
message UpdateNFTOffchainUrlRequest {
  // internai id 
  string id = 1;
  // resulted nft raw image b64 encoded
  ImageToUpload nftOffchainUrl = 2;
}


// Upload offchain metadata _metadata.json
message MetadataOffchainUrl {
  // all metadata json url uploaded to s3 will be used to upload to ipfs 
  string Url = 1;
}


// Burn
message BurnRequest {
  string txid = 1; // burn transaction
  string address = 2; // burner address 
  int32  mintSequenceNumber = 3;
  ShippingTo shipping = 4;
}

// ShippingTo shipping info
message ShippingTo {
  string fullName = 1; 
  string address = 2; 
  string zipCode = 3; 
  string city = 4; 
  string country = 5; 
  string email = 6; 
}

// Shipping info
message Shipping {
  ShippingTo shipping = 1;
  string trackingNumber = 2; 
}

// SetTrackingNumberRequest update tracking number for shipping
message SetTrackingNumberRequest {
  // internai id 
  string id = 1;
  // resulted nft raw image b64 encoded
  string trackingNumber = 2;
}
